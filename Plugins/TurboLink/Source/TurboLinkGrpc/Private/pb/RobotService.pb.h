// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotService_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_RobotService_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_RobotService_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotService_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_RobotService_2eproto;
namespace Robot {
class RobotAngularSpeedRequest;
struct RobotAngularSpeedRequestDefaultTypeInternal;
extern RobotAngularSpeedRequestDefaultTypeInternal _RobotAngularSpeedRequest_default_instance_;
class RobotLinearSpeedRequest;
struct RobotLinearSpeedRequestDefaultTypeInternal;
extern RobotLinearSpeedRequestDefaultTypeInternal _RobotLinearSpeedRequest_default_instance_;
class RobotResponse;
struct RobotResponseDefaultTypeInternal;
extern RobotResponseDefaultTypeInternal _RobotResponse_default_instance_;
}  // namespace Robot
PROTOBUF_NAMESPACE_OPEN
template <>
::Robot::RobotAngularSpeedRequest* Arena::CreateMaybeMessage<::Robot::RobotAngularSpeedRequest>(Arena*);
template <>
::Robot::RobotLinearSpeedRequest* Arena::CreateMaybeMessage<::Robot::RobotLinearSpeedRequest>(Arena*);
template <>
::Robot::RobotResponse* Arena::CreateMaybeMessage<::Robot::RobotResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace Robot {

// ===================================================================


// -------------------------------------------------------------------

class RobotLinearSpeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot.RobotLinearSpeedRequest) */ {
 public:
  inline RobotLinearSpeedRequest() : RobotLinearSpeedRequest(nullptr) {}
  ~RobotLinearSpeedRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotLinearSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotLinearSpeedRequest(const RobotLinearSpeedRequest& from);
  RobotLinearSpeedRequest(RobotLinearSpeedRequest&& from) noexcept
    : RobotLinearSpeedRequest() {
    *this = ::std::move(from);
  }

  inline RobotLinearSpeedRequest& operator=(const RobotLinearSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotLinearSpeedRequest& operator=(RobotLinearSpeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotLinearSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotLinearSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const RobotLinearSpeedRequest*>(
               &_RobotLinearSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotLinearSpeedRequest& a, RobotLinearSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotLinearSpeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotLinearSpeedRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotLinearSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotLinearSpeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotLinearSpeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotLinearSpeedRequest& from) {
    RobotLinearSpeedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotLinearSpeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Robot.RobotLinearSpeedRequest";
  }
  protected:
  explicit RobotLinearSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearSpeedFieldNumber = 1,
  };
  // float linearSpeed = 1;
  void clear_linearspeed() ;
  float linearspeed() const;
  void set_linearspeed(float value);

  private:
  float _internal_linearspeed() const;
  void _internal_set_linearspeed(float value);

  public:
  // @@protoc_insertion_point(class_scope:Robot.RobotLinearSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float linearspeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotService_2eproto;
};// -------------------------------------------------------------------

class RobotAngularSpeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot.RobotAngularSpeedRequest) */ {
 public:
  inline RobotAngularSpeedRequest() : RobotAngularSpeedRequest(nullptr) {}
  ~RobotAngularSpeedRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotAngularSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotAngularSpeedRequest(const RobotAngularSpeedRequest& from);
  RobotAngularSpeedRequest(RobotAngularSpeedRequest&& from) noexcept
    : RobotAngularSpeedRequest() {
    *this = ::std::move(from);
  }

  inline RobotAngularSpeedRequest& operator=(const RobotAngularSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotAngularSpeedRequest& operator=(RobotAngularSpeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotAngularSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotAngularSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const RobotAngularSpeedRequest*>(
               &_RobotAngularSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotAngularSpeedRequest& a, RobotAngularSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotAngularSpeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotAngularSpeedRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotAngularSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotAngularSpeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotAngularSpeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotAngularSpeedRequest& from) {
    RobotAngularSpeedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotAngularSpeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Robot.RobotAngularSpeedRequest";
  }
  protected:
  explicit RobotAngularSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngularSpeedFieldNumber = 1,
  };
  // float angularSpeed = 1;
  void clear_angularspeed() ;
  float angularspeed() const;
  void set_angularspeed(float value);

  private:
  float _internal_angularspeed() const;
  void _internal_set_angularspeed(float value);

  public:
  // @@protoc_insertion_point(class_scope:Robot.RobotAngularSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float angularspeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotService_2eproto;
};// -------------------------------------------------------------------

class RobotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot.RobotResponse) */ {
 public:
  inline RobotResponse() : RobotResponse(nullptr) {}
  ~RobotResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotResponse(const RobotResponse& from);
  RobotResponse(RobotResponse&& from) noexcept
    : RobotResponse() {
    *this = ::std::move(from);
  }

  inline RobotResponse& operator=(const RobotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotResponse& operator=(RobotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotResponse* internal_default_instance() {
    return reinterpret_cast<const RobotResponse*>(
               &_RobotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotResponse& a, RobotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotResponse& from) {
    RobotResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Robot.RobotResponse";
  }
  protected:
  explicit RobotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseMessageFieldNumber = 1,
  };
  // string responseMessage = 1;
  void clear_responsemessage() ;
  const std::string& responsemessage() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_responsemessage(Arg_&& arg, Args_... args);
  std::string* mutable_responsemessage();
  PROTOBUF_NODISCARD std::string* release_responsemessage();
  void set_allocated_responsemessage(std::string* ptr);

  private:
  const std::string& _internal_responsemessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responsemessage(
      const std::string& value);
  std::string* _internal_mutable_responsemessage();

  public:
  // @@protoc_insertion_point(class_scope:Robot.RobotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsemessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotService_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RobotLinearSpeedRequest

// float linearSpeed = 1;
inline void RobotLinearSpeedRequest::clear_linearspeed() {
  _impl_.linearspeed_ = 0;
}
inline float RobotLinearSpeedRequest::linearspeed() const {
  // @@protoc_insertion_point(field_get:Robot.RobotLinearSpeedRequest.linearSpeed)
  return _internal_linearspeed();
}
inline void RobotLinearSpeedRequest::set_linearspeed(float value) {
  _internal_set_linearspeed(value);
  // @@protoc_insertion_point(field_set:Robot.RobotLinearSpeedRequest.linearSpeed)
}
inline float RobotLinearSpeedRequest::_internal_linearspeed() const {
  return _impl_.linearspeed_;
}
inline void RobotLinearSpeedRequest::_internal_set_linearspeed(float value) {
  ;
  _impl_.linearspeed_ = value;
}

// -------------------------------------------------------------------

// RobotAngularSpeedRequest

// float angularSpeed = 1;
inline void RobotAngularSpeedRequest::clear_angularspeed() {
  _impl_.angularspeed_ = 0;
}
inline float RobotAngularSpeedRequest::angularspeed() const {
  // @@protoc_insertion_point(field_get:Robot.RobotAngularSpeedRequest.angularSpeed)
  return _internal_angularspeed();
}
inline void RobotAngularSpeedRequest::set_angularspeed(float value) {
  _internal_set_angularspeed(value);
  // @@protoc_insertion_point(field_set:Robot.RobotAngularSpeedRequest.angularSpeed)
}
inline float RobotAngularSpeedRequest::_internal_angularspeed() const {
  return _impl_.angularspeed_;
}
inline void RobotAngularSpeedRequest::_internal_set_angularspeed(float value) {
  ;
  _impl_.angularspeed_ = value;
}

// -------------------------------------------------------------------

// RobotResponse

// string responseMessage = 1;
inline void RobotResponse::clear_responsemessage() {
  _impl_.responsemessage_.ClearToEmpty();
}
inline const std::string& RobotResponse::responsemessage() const {
  // @@protoc_insertion_point(field_get:Robot.RobotResponse.responseMessage)
  return _internal_responsemessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RobotResponse::set_responsemessage(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.responsemessage_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Robot.RobotResponse.responseMessage)
}
inline std::string* RobotResponse::mutable_responsemessage() {
  std::string* _s = _internal_mutable_responsemessage();
  // @@protoc_insertion_point(field_mutable:Robot.RobotResponse.responseMessage)
  return _s;
}
inline const std::string& RobotResponse::_internal_responsemessage() const {
  return _impl_.responsemessage_.Get();
}
inline void RobotResponse::_internal_set_responsemessage(const std::string& value) {
  ;


  _impl_.responsemessage_.Set(value, GetArenaForAllocation());
}
inline std::string* RobotResponse::_internal_mutable_responsemessage() {
  ;
  return _impl_.responsemessage_.Mutable( GetArenaForAllocation());
}
inline std::string* RobotResponse::release_responsemessage() {
  // @@protoc_insertion_point(field_release:Robot.RobotResponse.responseMessage)
  return _impl_.responsemessage_.Release();
}
inline void RobotResponse::set_allocated_responsemessage(std::string* value) {
  _impl_.responsemessage_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.responsemessage_.IsDefault()) {
          _impl_.responsemessage_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Robot.RobotResponse.responseMessage)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Robot


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_RobotService_2eproto_2epb_2eh
