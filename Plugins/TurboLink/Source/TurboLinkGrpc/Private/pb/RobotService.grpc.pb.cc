// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RobotService.proto

#include "RobotService.pb.h"
#include "RobotService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Robot {

static const char* RobotService_method_names[] = {
  "/Robot.RobotService/SetLinearSpeed",
  "/Robot.RobotService/SetAngularSpeed",
};

std::unique_ptr< RobotService::Stub> RobotService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotService::Stub> stub(new RobotService::Stub(channel, options));
  return stub;
}

RobotService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetLinearSpeed_(RobotService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAngularSpeed_(RobotService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotService::Stub::SetLinearSpeed(::grpc::ClientContext* context, const ::Robot::RobotLinearSpeedRequest& request, ::Robot::RobotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Robot::RobotLinearSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLinearSpeed_, context, request, response);
}

void RobotService::Stub::async::SetLinearSpeed(::grpc::ClientContext* context, const ::Robot::RobotLinearSpeedRequest* request, ::Robot::RobotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Robot::RobotLinearSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLinearSpeed_, context, request, response, std::move(f));
}

void RobotService::Stub::async::SetLinearSpeed(::grpc::ClientContext* context, const ::Robot::RobotLinearSpeedRequest* request, ::Robot::RobotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLinearSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Robot::RobotResponse>* RobotService::Stub::PrepareAsyncSetLinearSpeedRaw(::grpc::ClientContext* context, const ::Robot::RobotLinearSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Robot::RobotResponse, ::Robot::RobotLinearSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLinearSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Robot::RobotResponse>* RobotService::Stub::AsyncSetLinearSpeedRaw(::grpc::ClientContext* context, const ::Robot::RobotLinearSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLinearSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::SetAngularSpeed(::grpc::ClientContext* context, const ::Robot::RobotAngularSpeedRequest& request, ::Robot::RobotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Robot::RobotAngularSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAngularSpeed_, context, request, response);
}

void RobotService::Stub::async::SetAngularSpeed(::grpc::ClientContext* context, const ::Robot::RobotAngularSpeedRequest* request, ::Robot::RobotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Robot::RobotAngularSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAngularSpeed_, context, request, response, std::move(f));
}

void RobotService::Stub::async::SetAngularSpeed(::grpc::ClientContext* context, const ::Robot::RobotAngularSpeedRequest* request, ::Robot::RobotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAngularSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Robot::RobotResponse>* RobotService::Stub::PrepareAsyncSetAngularSpeedRaw(::grpc::ClientContext* context, const ::Robot::RobotAngularSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Robot::RobotResponse, ::Robot::RobotAngularSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAngularSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Robot::RobotResponse>* RobotService::Stub::AsyncSetAngularSpeedRaw(::grpc::ClientContext* context, const ::Robot::RobotAngularSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAngularSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::Robot::RobotLinearSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Robot::RobotLinearSpeedRequest* req,
             ::Robot::RobotResponse* resp) {
               return service->SetLinearSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::Robot::RobotAngularSpeedRequest, ::Robot::RobotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Robot::RobotAngularSpeedRequest* req,
             ::Robot::RobotResponse* resp) {
               return service->SetAngularSpeed(ctx, req, resp);
             }, this)));
}

RobotService::Service::~Service() {
}

::grpc::Status RobotService::Service::SetLinearSpeed(::grpc::ServerContext* context, const ::Robot::RobotLinearSpeedRequest* request, ::Robot::RobotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::SetAngularSpeed(::grpc::ServerContext* context, const ::Robot::RobotAngularSpeedRequest* request, ::Robot::RobotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Robot

