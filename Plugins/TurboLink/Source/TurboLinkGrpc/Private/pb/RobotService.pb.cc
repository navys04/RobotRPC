// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotService.proto

#include "RobotService.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace Robot {
template <typename>
PROTOBUF_CONSTEXPR RobotLinearSpeedRequest::RobotLinearSpeedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linearspeed_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotLinearSpeedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotLinearSpeedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotLinearSpeedRequestDefaultTypeInternal() {}
  union {
    RobotLinearSpeedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotLinearSpeedRequestDefaultTypeInternal _RobotLinearSpeedRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RobotAngularSpeedRequest::RobotAngularSpeedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angularspeed_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotAngularSpeedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotAngularSpeedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotAngularSpeedRequestDefaultTypeInternal() {}
  union {
    RobotAngularSpeedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotAngularSpeedRequestDefaultTypeInternal _RobotAngularSpeedRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RobotResponse::RobotResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsemessage_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotResponseDefaultTypeInternal() {}
  union {
    RobotResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotResponseDefaultTypeInternal _RobotResponse_default_instance_;
}  // namespace Robot
static ::_pb::Metadata file_level_metadata_RobotService_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_RobotService_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_RobotService_2eproto = nullptr;
const ::uint32_t TableStruct_RobotService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Robot::RobotLinearSpeedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Robot::RobotLinearSpeedRequest, _impl_.linearspeed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Robot::RobotAngularSpeedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Robot::RobotAngularSpeedRequest, _impl_.angularspeed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Robot::RobotResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Robot::RobotResponse, _impl_.responsemessage_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Robot::RobotLinearSpeedRequest)},
        { 9, -1, -1, sizeof(::Robot::RobotAngularSpeedRequest)},
        { 18, -1, -1, sizeof(::Robot::RobotResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Robot::_RobotLinearSpeedRequest_default_instance_._instance,
    &::Robot::_RobotAngularSpeedRequest_default_instance_._instance,
    &::Robot::_RobotResponse_default_instance_._instance,
};
const char descriptor_table_protodef_RobotService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022RobotService.proto\022\005Robot\".\n\027RobotLine"
    "arSpeedRequest\022\023\n\013linearSpeed\030\001 \001(\002\"0\n\030R"
    "obotAngularSpeedRequest\022\024\n\014angularSpeed\030"
    "\001 \001(\002\"(\n\rRobotResponse\022\027\n\017responseMessag"
    "e\030\001 \001(\t2\240\001\n\014RobotService\022F\n\016SetLinearSpe"
    "ed\022\036.Robot.RobotLinearSpeedRequest\032\024.Rob"
    "ot.RobotResponse\022H\n\017SetAngularSpeed\022\037.Ro"
    "bot.RobotAngularSpeedRequest\032\024.Robot.Rob"
    "otResponseb\006proto3"
};
static ::absl::once_flag descriptor_table_RobotService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RobotService_2eproto = {
    false,
    false,
    338,
    descriptor_table_protodef_RobotService_2eproto,
    "RobotService.proto",
    &descriptor_table_RobotService_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_RobotService_2eproto::offsets,
    file_level_metadata_RobotService_2eproto,
    file_level_enum_descriptors_RobotService_2eproto,
    file_level_service_descriptors_RobotService_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RobotService_2eproto_getter() {
  return &descriptor_table_RobotService_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RobotService_2eproto(&descriptor_table_RobotService_2eproto);
namespace Robot {
// ===================================================================

class RobotLinearSpeedRequest::_Internal {
 public:
};

RobotLinearSpeedRequest::RobotLinearSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Robot.RobotLinearSpeedRequest)
}
RobotLinearSpeedRequest::RobotLinearSpeedRequest(const RobotLinearSpeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Robot.RobotLinearSpeedRequest)
}

inline void RobotLinearSpeedRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.linearspeed_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotLinearSpeedRequest::~RobotLinearSpeedRequest() {
  // @@protoc_insertion_point(destructor:Robot.RobotLinearSpeedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotLinearSpeedRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotLinearSpeedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotLinearSpeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot.RobotLinearSpeedRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.linearspeed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotLinearSpeedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float linearSpeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.linearspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RobotLinearSpeedRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot.RobotLinearSpeedRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float linearSpeed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_linearspeed = this->_internal_linearspeed();
  ::uint32_t raw_linearspeed;
  memcpy(&raw_linearspeed, &tmp_linearspeed, sizeof(tmp_linearspeed));
  if (raw_linearspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_linearspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot.RobotLinearSpeedRequest)
  return target;
}

::size_t RobotLinearSpeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot.RobotLinearSpeedRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float linearSpeed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_linearspeed = this->_internal_linearspeed();
  ::uint32_t raw_linearspeed;
  memcpy(&raw_linearspeed, &tmp_linearspeed, sizeof(tmp_linearspeed));
  if (raw_linearspeed != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotLinearSpeedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotLinearSpeedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotLinearSpeedRequest::GetClassData() const { return &_class_data_; }


void RobotLinearSpeedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotLinearSpeedRequest*>(&to_msg);
  auto& from = static_cast<const RobotLinearSpeedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Robot.RobotLinearSpeedRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_linearspeed = from._internal_linearspeed();
  ::uint32_t raw_linearspeed;
  memcpy(&raw_linearspeed, &tmp_linearspeed, sizeof(tmp_linearspeed));
  if (raw_linearspeed != 0) {
    _this->_internal_set_linearspeed(from._internal_linearspeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotLinearSpeedRequest::CopyFrom(const RobotLinearSpeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot.RobotLinearSpeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotLinearSpeedRequest::IsInitialized() const {
  return true;
}

void RobotLinearSpeedRequest::InternalSwap(RobotLinearSpeedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.linearspeed_, other->_impl_.linearspeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotLinearSpeedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotService_2eproto_getter, &descriptor_table_RobotService_2eproto_once,
      file_level_metadata_RobotService_2eproto[0]);
}
// ===================================================================

class RobotAngularSpeedRequest::_Internal {
 public:
};

RobotAngularSpeedRequest::RobotAngularSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Robot.RobotAngularSpeedRequest)
}
RobotAngularSpeedRequest::RobotAngularSpeedRequest(const RobotAngularSpeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Robot.RobotAngularSpeedRequest)
}

inline void RobotAngularSpeedRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.angularspeed_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotAngularSpeedRequest::~RobotAngularSpeedRequest() {
  // @@protoc_insertion_point(destructor:Robot.RobotAngularSpeedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotAngularSpeedRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotAngularSpeedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotAngularSpeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot.RobotAngularSpeedRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angularspeed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotAngularSpeedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float angularSpeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.angularspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RobotAngularSpeedRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot.RobotAngularSpeedRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float angularSpeed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_angularspeed = this->_internal_angularspeed();
  ::uint32_t raw_angularspeed;
  memcpy(&raw_angularspeed, &tmp_angularspeed, sizeof(tmp_angularspeed));
  if (raw_angularspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_angularspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot.RobotAngularSpeedRequest)
  return target;
}

::size_t RobotAngularSpeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot.RobotAngularSpeedRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angularSpeed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_angularspeed = this->_internal_angularspeed();
  ::uint32_t raw_angularspeed;
  memcpy(&raw_angularspeed, &tmp_angularspeed, sizeof(tmp_angularspeed));
  if (raw_angularspeed != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotAngularSpeedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotAngularSpeedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotAngularSpeedRequest::GetClassData() const { return &_class_data_; }


void RobotAngularSpeedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotAngularSpeedRequest*>(&to_msg);
  auto& from = static_cast<const RobotAngularSpeedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Robot.RobotAngularSpeedRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_angularspeed = from._internal_angularspeed();
  ::uint32_t raw_angularspeed;
  memcpy(&raw_angularspeed, &tmp_angularspeed, sizeof(tmp_angularspeed));
  if (raw_angularspeed != 0) {
    _this->_internal_set_angularspeed(from._internal_angularspeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotAngularSpeedRequest::CopyFrom(const RobotAngularSpeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot.RobotAngularSpeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotAngularSpeedRequest::IsInitialized() const {
  return true;
}

void RobotAngularSpeedRequest::InternalSwap(RobotAngularSpeedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.angularspeed_, other->_impl_.angularspeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotAngularSpeedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotService_2eproto_getter, &descriptor_table_RobotService_2eproto_once,
      file_level_metadata_RobotService_2eproto[1]);
}
// ===================================================================

class RobotResponse::_Internal {
 public:
};

RobotResponse::RobotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Robot.RobotResponse)
}
RobotResponse::RobotResponse(const RobotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsemessage_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.responsemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.responsemessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsemessage().empty()) {
    _this->_impl_.responsemessage_.Set(from._internal_responsemessage(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Robot.RobotResponse)
}

inline void RobotResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.responsemessage_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.responsemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.responsemessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RobotResponse::~RobotResponse() {
  // @@protoc_insertion_point(destructor:Robot.RobotResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsemessage_.Destroy();
}

void RobotResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot.RobotResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsemessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string responseMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_responsemessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Robot.RobotResponse.responseMessage"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RobotResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot.RobotResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (!this->_internal_responsemessage().empty()) {
    const std::string& _s = this->_internal_responsemessage();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Robot.RobotResponse.responseMessage");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot.RobotResponse)
  return target;
}

::size_t RobotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot.RobotResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (!this->_internal_responsemessage().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_responsemessage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotResponse::GetClassData() const { return &_class_data_; }


void RobotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotResponse*>(&to_msg);
  auto& from = static_cast<const RobotResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Robot.RobotResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_responsemessage().empty()) {
    _this->_internal_set_responsemessage(from._internal_responsemessage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotResponse::CopyFrom(const RobotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot.RobotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotResponse::IsInitialized() const {
  return true;
}

void RobotResponse::InternalSwap(RobotResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.responsemessage_, lhs_arena,
                                       &other->_impl_.responsemessage_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotService_2eproto_getter, &descriptor_table_RobotService_2eproto_once,
      file_level_metadata_RobotService_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Robot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Robot::RobotLinearSpeedRequest*
Arena::CreateMaybeMessage< ::Robot::RobotLinearSpeedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot::RobotLinearSpeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Robot::RobotAngularSpeedRequest*
Arena::CreateMaybeMessage< ::Robot::RobotAngularSpeedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot::RobotAngularSpeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Robot::RobotResponse*
Arena::CreateMaybeMessage< ::Robot::RobotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot::RobotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
